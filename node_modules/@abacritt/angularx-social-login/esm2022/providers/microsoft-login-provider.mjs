import { BaseLoginProvider } from '../entities/base-login-provider';
import { SocialUser } from '../entities/social-user';
/**
 * Protocol modes supported by MSAL.
 */
export var ProtocolMode;
(function (ProtocolMode) {
    ProtocolMode["AAD"] = "AAD";
    ProtocolMode["OIDC"] = "OIDC";
})(ProtocolMode || (ProtocolMode = {}));
const COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';
/**
 * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser
 */
export class MicrosoftLoginProvider extends BaseLoginProvider {
    static { this.PROVIDER_ID = 'MICROSOFT'; }
    constructor(clientId, initOptions) {
        super();
        this.clientId = clientId;
        this.initOptions = {
            authority: COMMON_AUTHORITY,
            scopes: ['openid', 'email', 'profile', 'User.Read'],
            knownAuthorities: [],
            protocolMode: ProtocolMode.AAD,
            clientCapabilities: [],
            cacheLocation: 'sessionStorage'
        };
        this.initOptions = {
            ...this.initOptions,
            ...initOptions
        };
    }
    initialize() {
        return new Promise((resolve, reject) => {
            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {
                try {
                    const config = {
                        auth: {
                            clientId: this.clientId,
                            redirectUri: this.initOptions.redirect_uri ?? location.origin,
                            authority: this.initOptions.authority,
                            knownAuthorities: this.initOptions.knownAuthorities,
                            protocolMode: this.initOptions.protocolMode,
                            clientCapabilities: this.initOptions.clientCapabilities
                        },
                        cache: !this.initOptions.cacheLocation ? null : {
                            cacheLocation: this.initOptions.cacheLocation
                        }
                    };
                    this._instance = new msal.PublicClientApplication(config);
                    resolve();
                }
                catch (e) {
                    reject(e);
                }
            });
        });
    }
    getSocialUser(loginResponse) {
        return new Promise((resolve, reject) => {
            //After login, use Microsoft Graph API to get user info
            let meRequest = new XMLHttpRequest();
            meRequest.onreadystatechange = () => {
                if (meRequest.readyState == 4) {
                    try {
                        if (meRequest.status == 200) {
                            let userInfo = JSON.parse(meRequest.responseText);
                            let user = new SocialUser();
                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;
                            user.id = loginResponse.idToken;
                            user.authToken = loginResponse.accessToken;
                            user.name = loginResponse.idTokenClaims.name;
                            user.email = loginResponse.account.username;
                            user.idToken = loginResponse.idToken;
                            user.response = loginResponse;
                            user.firstName = userInfo.givenName;
                            user.lastName = userInfo.surname;
                            resolve(user);
                        }
                        else {
                            reject(`Error retrieving user info: ${meRequest.status}`);
                        }
                    }
                    catch (err) {
                        reject(err);
                    }
                }
            };
            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http
            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');
            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);
            try {
                meRequest.send();
            }
            catch (err) {
                reject(err);
            }
        });
    }
    async getLoginStatus() {
        const accounts = this._instance.getAllAccounts();
        if (accounts?.length > 0) {
            const loginResponse = await this._instance.ssoSilent({
                scopes: this.initOptions.scopes,
                loginHint: accounts[0].username
            });
            return await this.getSocialUser(loginResponse);
        }
        else {
            throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;
        }
    }
    async signIn() {
        const loginResponse = await this._instance.loginPopup({
            scopes: this.initOptions.scopes,
            prompt: this.initOptions.prompt,
        });
        return await this.getSocialUser(loginResponse);
    }
    async signOut(revoke) {
        const accounts = this._instance.getAllAccounts();
        if (accounts?.length > 0) {
            await this._instance.logoutPopup({
                account: accounts[0],
                postLogoutRedirectUri: this.initOptions.logout_redirect_uri ?? this.initOptions.redirect_uri ?? location.href
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWljcm9zb2Z0LWxvZ2luLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbGliL3NyYy9wcm92aWRlcnMvbWljcm9zb2Z0LWxvZ2luLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVyRDs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLFlBR1g7QUFIRCxXQUFZLFlBQVk7SUFDdEIsMkJBQVcsQ0FBQTtJQUNYLDZCQUFhLENBQUE7QUFDZixDQUFDLEVBSFcsWUFBWSxLQUFaLFlBQVksUUFHdkI7QUFrRkQsTUFBTSxnQkFBZ0IsR0FBVywyQ0FBMkMsQ0FBQztBQUU3RTs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxpQkFBaUI7YUFFcEMsZ0JBQVcsR0FBVyxXQUFXLEFBQXRCLENBQXVCO0lBV3pELFlBQ1UsUUFBZ0IsRUFDeEIsV0FBOEI7UUFFOUIsS0FBSyxFQUFFLENBQUM7UUFIQSxhQUFRLEdBQVIsUUFBUSxDQUFRO1FBVmxCLGdCQUFXLEdBQXFCO1lBQ3RDLFNBQVMsRUFBRSxnQkFBZ0I7WUFDM0IsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDO1lBQ25ELGdCQUFnQixFQUFFLEVBQUU7WUFDcEIsWUFBWSxFQUFFLFlBQVksQ0FBQyxHQUFHO1lBQzlCLGtCQUFrQixFQUFFLEVBQUU7WUFDdEIsYUFBYSxFQUFFLGdCQUFnQjtTQUNoQyxDQUFDO1FBUUEsSUFBSSxDQUFDLFdBQVcsR0FBRztZQUNqQixHQUFHLElBQUksQ0FBQyxXQUFXO1lBQ25CLEdBQUcsV0FBVztTQUNmLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sSUFBSSxPQUFPLENB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LE1BQWdCO1FBQzVCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDakQsSUFBSSxRQUFRLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN4QixNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDO2dCQUMvQixPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDcEIscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksSUFBSSxRQUFRLENBQUMsSUFBSTthQUM5RyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTG9naW5Qcm92aWRlciB9IGZyb20gJy4uL2VudGl0aWVzL2Jhc2UtbG9naW4tcHJvdmlkZXInO1xyXG5pbXBvcnQgeyBTb2NpYWxVc2VyIH0gZnJvbSAnLi4vZW50aXRpZXMvc29jaWFsLXVzZXInO1xyXG5cclxuLyoqXHJcbiAqIFByb3RvY29sIG1vZGVzIHN1cHBvcnRlZCBieSBNU0FMLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gUHJvdG9jb2xNb2RlIHtcclxuICBBQUQgPSAnQUFEJyxcclxuICBPSURDID0gJ09JREMnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXphdGlvbiBPcHRpb25zIGZvciBNaWNyb3NvZnQgUHJvdmlkZXI6IGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZUFEL21pY3Jvc29mdC1hdXRoZW50aWNhdGlvbi1saWJyYXJ5LWZvci1qcy9ibG9iL2Rldi9saWIvbXNhbC1icm93c2VyL2RvY3MvaW5pdGlhbGl6YXRpb24ubWRcclxuICogRGV0YWlscyAobm90IGFsbCBvcHRpb25zIGFyZSBzdXBwb3J0ZWQpOiBodHRwczovL2dpdGh1Yi5jb20vQXp1cmVBRC9taWNyb3NvZnQtYXV0aGVudGljYXRpb24tbGlicmFyeS1mb3ItanMvYmxvYi9kZXYvbGliL21zYWwtYnJvd3Nlci9kb2NzL2NvbmZpZ3VyYXRpb24ubWRcclxuICovXHJcbmV4cG9ydCB0eXBlIE1pY3Jvc29mdE9wdGlvbnMgPSB7XHJcbiAgcmVkaXJlY3RfdXJpPzogc3RyaW5nLFxyXG4gIGxvZ291dF9yZWRpcmVjdF91cmk/OiBzdHJpbmcsXHJcbiAgYXV0aG9yaXR5Pzogc3RyaW5nLFxyXG4gIGtub3duQXV0aG9yaXRpZXM/OiBzdHJpbmdbXSxcclxuICBwcm90b2NvbE1vZGU/OiBQcm90b2NvbE1vZGUsXHJcbiAgY2xpZW50Q2FwYWJpbGl0aWVzPzogc3RyaW5nW10sXHJcbiAgY2FjaGVMb2NhdGlvbj86IHN0cmluZyxcclxuICBzY29wZXM/OiBzdHJpbmdbXSxcclxuICBwcm9tcHQ/OiBzdHJpbmcsXHJcbn07XHJcblxyXG4vLyBDb2xsZWN0aW9uIG9mIGludGVybmFsIE1TQUwgaW50ZXJmYWNlcyBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vQXp1cmVBRC9taWNyb3NvZnQtYXV0aGVudGljYXRpb24tbGlicmFyeS1mb3ItanMvdHJlZS9kZXYvbGliL21zYWwtYnJvd3Nlci9zcmNcclxuXHJcbmludGVyZmFjZSBNU0FMQWNjb3VudCB7XHJcbiAgZW52aXJvbm1lbnQ6IHN0cmluZztcclxuICBob21lQWNjb3VudElkOiBzdHJpbmc7XHJcbiAgdGVuYW50SWQ6IHN0cmluZztcclxuICB1c2VybmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgTVNHcmFwaFVzZXJJbmZvIHtcclxuICBidXNpbmVzc1Bob25lczogc3RyaW5nW107XHJcbiAgZGlzcGxheU5hbWU6IHN0cmluZztcclxuICBnaXZlbk5hbWU6IHN0cmluZztcclxuICBpZDogc3RyaW5nO1xyXG4gIGpvYlRpdGxlOiBzdHJpbmc7XHJcbiAgbWFpbDogc3RyaW5nO1xyXG4gIG1vYmlsZVBob25lOiBzdHJpbmc7XHJcbiAgb2ZmaWNlTG9jYXRpb246IHN0cmluZztcclxuICBwcmVmZXJyZWRMYW5ndWFnZTogc3RyaW5nO1xyXG4gIHN1cm5hbWU6IHN0cmluZztcclxuICB1c2VyUHJpbmNpcGFsTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgTVNBTExvZ2luUmVxdWVzdCB7XHJcbiAgc2NvcGVzPzogc3RyaW5nW107XHJcbiAgc2lkPzogc3RyaW5nO1xyXG4gIGxvZ2luSGludD86IHN0cmluZztcclxuICBkb21haW5IaW50Pzogc3RyaW5nO1xyXG4gIHByb21wdD86IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIE1TQUxMb2dpblJlc3BvbnNlIHtcclxuICBhY2Nlc3NUb2tlbjogc3RyaW5nO1xyXG4gIGFjY291bnQ6IE1TQUxBY2NvdW50O1xyXG4gIGV4cGlyZXNPbjogRGF0ZTtcclxuICBleHRFeHBpcmVzT246IERhdGU7XHJcbiAgZmFtaWx5SWQ6IHN0cmluZztcclxuICBmcm9tQ2FjaGU6IGJvb2xlYW47XHJcbiAgaWRUb2tlbjogc3RyaW5nO1xyXG4gIGlkVG9rZW5DbGFpbXM6IGFueTtcclxuICBzY29wZXM6IHN0cmluZ1tdO1xyXG4gIHN0YXRlOiBzdHJpbmc7XHJcbiAgdGVuYW50SWQ6IHN0cmluZztcclxuICB1bmlxdWVJZDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgTVNBTExvZ291dFJlcXVlc3Qge1xyXG4gIGFjY291bnQ/OiBNU0FMQWNjb3VudDtcclxuICBwb3N0TG9nb3V0UmVkaXJlY3RVcmk/OiBzdHJpbmc7XHJcbiAgYXV0aG9yaXR5Pzogc3RyaW5nO1xyXG4gIGNvcnJlbGF0aW9uSWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBNU0FMQ2xpZW50QXBwbGljYXRpb24ge1xyXG4gIGdldEFsbEFjY291bnRzKCk6IE1TQUxBY2NvdW50W107XHJcbiAgbG9nb3V0UG9wdXAobG9nb3V0UmVxdWVzdD86IE1TQUxMb2dvdXRSZXF1ZXN0KTogUHJvbWlzZTx2b2lkPjtcclxuICBsb2dpblBvcHVwKGxvZ2luUmVxdWVzdDogTVNBTExvZ2luUmVxdWVzdCk6IFByb21pc2U8TVNBTExvZ2luUmVzcG9uc2U+O1xyXG4gIHNzb1NpbGVudChsb2dpblJlcXVlc3Q6IE1TQUxMb2dpblJlcXVlc3QpOiBQcm9taXNlPE1TQUxMb2dpblJlc3BvbnNlPjtcclxuICBhY3F1aXJlVG9rZW5TaWxlbnQobG9naW5SZXF1ZXN0OiBNU0FMTG9naW5SZXF1ZXN0KTogUHJvbWlzZTxNU0FMTG9naW5SZXNwb25zZT47XHJcbiAgZ2V0QWNjb3VudEJ5SG9tZUlkKGhvbWVBY2NvdW50SWQ6IHN0cmluZyk6IE1TQUxBY2NvdW50O1xyXG59XHJcblxyXG5kZWNsYXJlIGxldCBtc2FsOiBhbnk7XHJcblxyXG5jb25zdCBDT01NT05fQVVUSE9SSVRZOiBzdHJpbmcgPSAnaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tL2NvbW1vbi8nO1xyXG5cclxuLyoqXHJcbiAqIE1pY3Jvc29mdCBBdXRoZW50aWNhdGlvbiB1c2luZyBNU0FMIHYyOiBodHRwczovL2dpdGh1Yi5jb20vQXp1cmVBRC9taWNyb3NvZnQtYXV0aGVudGljYXRpb24tbGlicmFyeS1mb3ItanMvdHJlZS9kZXYvbGliL21zYWwtYnJvd3NlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1pY3Jvc29mdExvZ2luUHJvdmlkZXIgZXh0ZW5kcyBCYXNlTG9naW5Qcm92aWRlciB7XHJcbiAgcHJpdmF0ZSBfaW5zdGFuY2U6IE1TQUxDbGllbnRBcHBsaWNhdGlvbjtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBST1ZJREVSX0lEOiBzdHJpbmcgPSAnTUlDUk9TT0ZUJztcclxuXHJcbiAgcHJpdmF0ZSBpbml0T3B0aW9uczogTWljcm9zb2Z0T3B0aW9ucyA9IHtcclxuICAgIGF1dGhvcml0eTogQ09NTU9OX0FVVEhPUklUWSxcclxuICAgIHNjb3BlczogWydvcGVuaWQnLCAnZW1haWwnLCAncHJvZmlsZScsICdVc2VyLlJlYWQnXSxcclxuICAgIGtub3duQXV0aG9yaXRpZXM6IFtdLFxyXG4gICAgcHJvdG9jb2xNb2RlOiBQcm90b2NvbE1vZGUuQUFELFxyXG4gICAgY2xpZW50Q2FwYWJpbGl0aWVzOiBbXSxcclxuICAgIGNhY2hlTG9jYXRpb246ICdzZXNzaW9uU3RvcmFnZSdcclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY2xpZW50SWQ6IHN0cmluZyxcclxuICAgIGluaXRPcHRpb25zPzogTWljcm9zb2Z0T3B0aW9uc1xyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLmluaXRPcHRpb25zID0ge1xyXG4gICAgICAuLi50aGlzLmluaXRPcHRpb25zLFxyXG4gICAgICAuLi5pbml0T3B0aW9uc1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmxvYWRTY3JpcHQoXHJcbiAgICAgICAgTWljcm9zb2Z0TG9naW5Qcm92aWRlci5QUk9WSURFUl9JRCxcclxuICAgICAgICAnaHR0cHM6Ly9hbGNkbi5tc2F1dGgubmV0L2Jyb3dzZXIvMi4xMy4xL2pzL21zYWwtYnJvd3Nlci5taW4uanMnLFxyXG4gICAgICAgICgpID0+IHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcclxuICAgICAgICAgICAgICBhdXRoOiB7XHJcbiAgICAgICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZCxcclxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB0aGlzLmluaXRPcHRpb25zLnJlZGlyZWN0X3VyaSA/PyBsb2NhdGlvbi5vcmlnaW4sXHJcbiAgICAgICAgICAgICAgICBhdXRob3JpdHk6IHRoaXMuaW5pdE9wdGlvbnMuYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICAgICAga25vd25BdXRob3JpdGllczogdGhpcy5pbml0T3B0aW9ucy5rbm93bkF1dGhvcml0aWVzLFxyXG4gICAgICAgICAgICAgICAgcHJvdG9jb2xNb2RlOiB0aGlzLmluaXRPcHRpb25zLnByb3RvY29sTW9kZSxcclxuICAgICAgICAgICAgICAgIGNsaWVudENhcGFiaWxpdGllczogdGhpcy5pbml0T3B0aW9ucy5jbGllbnRDYXBhYmlsaXRpZXNcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGNhY2hlOiAhdGhpcy5pbml0T3B0aW9ucy5jYWNoZUxvY2F0aW9uID8gbnVsbCA6IHtcclxuICAgICAgICAgICAgICAgIGNhY2hlTG9jYXRpb246IHRoaXMuaW5pdE9wdGlvbnMuY2FjaGVMb2NhdGlvblxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IG1zYWwuUHVibGljQ2xpZW50QXBwbGljYXRpb24oY29uZmlnKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFNvY2lhbFVzZXIobG9naW5SZXNwb25zZSk6IFByb21pc2U8U29jaWFsVXNlcj4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNvY2lhbFVzZXI+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgLy9BZnRlciBsb2dpbiwgdXNlIE1pY3Jvc29mdCBHcmFwaCBBUEkgdG8gZ2V0IHVzZXIgaW5mb1xyXG4gICAgICBsZXQgbWVSZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgIG1lUmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKG1lUmVxdWVzdC5yZWFkeVN0YXRlID09IDQpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChtZVJlcXVlc3Quc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgIGxldCB1c2VySW5mbyA9IDxNU0dyYXBoVXNlckluZm8+SlNPTi5wYXJzZShtZVJlcXVlc3QucmVzcG9uc2VUZXh0KTtcclxuXHJcbiAgICAgICAgICAgICAgbGV0IHVzZXI6IFNvY2lhbFVzZXIgPSBuZXcgU29jaWFsVXNlcigpO1xyXG4gICAgICAgICAgICAgIHVzZXIucHJvdmlkZXIgPSBNaWNyb3NvZnRMb2dpblByb3ZpZGVyLlBST1ZJREVSX0lEO1xyXG4gICAgICAgICAgICAgIHVzZXIuaWQgPSBsb2dpblJlc3BvbnNlLmlkVG9rZW47XHJcbiAgICAgICAgICAgICAgdXNlci5hdXRoVG9rZW4gPSBsb2dpblJlc3BvbnNlLmFjY2Vzc1Rva2VuO1xyXG4gICAgICAgICAgICAgIHVzZXIubmFtZSA9IGxvZ2luUmVzcG9uc2UuaWRUb2tlbkNsYWltcy5uYW1lO1xyXG4gICAgICAgICAgICAgIHVzZXIuZW1haWwgPSBsb2dpblJlc3BvbnNlLmFjY291bnQudXNlcm5hbWU7XHJcbiAgICAgICAgICAgICAgdXNlci5pZFRva2VuID0gbG9naW5SZXNwb25zZS5pZFRva2VuO1xyXG4gICAgICAgICAgICAgIHVzZXIucmVzcG9uc2UgPSBsb2dpblJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgIHVzZXIuZmlyc3ROYW1lID0gdXNlckluZm8uZ2l2ZW5OYW1lO1xyXG4gICAgICAgICAgICAgIHVzZXIubGFzdE5hbWUgPSB1c2VySW5mby5zdXJuYW1lO1xyXG5cclxuICAgICAgICAgICAgICByZXNvbHZlKHVzZXIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlamVjdChgRXJyb3IgcmV0cmlldmluZyB1c2VyIGluZm86ICR7bWVSZXF1ZXN0LnN0YXR1c31gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vTWljcm9zb2Z0IEdyYXBoIE1FIEVuZHBvaW50OiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9ncmFwaC9hcGkvdXNlci1nZXQ/dmlldz1ncmFwaC1yZXN0LTEuMCZ0YWJzPWh0dHBcclxuICAgICAgbWVSZXF1ZXN0Lm9wZW4oJ0dFVCcsICdodHRwczovL2dyYXBoLm1pY3Jvc29mdC5jb20vdjEuMC9tZScpO1xyXG4gICAgICBtZVJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHtsb2dpblJlc3BvbnNlLmFjY2Vzc1Rva2VufWApO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIG1lUmVxdWVzdC5zZW5kKCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldExvZ2luU3RhdHVzKCk6IFByb21pc2U8U29jaWFsVXNlcj4ge1xyXG4gICAgY29uc3QgYWNjb3VudHMgPSB0aGlzLl9pbnN0YW5jZS5nZXRBbGxBY2NvdW50cygpO1xyXG4gICAgaWYgKGFjY291bnRzPy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IGxvZ2luUmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9pbnN0YW5jZS5zc29TaWxlbnQoe1xyXG4gICAgICAgIHNjb3BlczogdGhpcy5pbml0T3B0aW9ucy5zY29wZXMsXHJcbiAgICAgICAgbG9naW5IaW50OiBhY2NvdW50c1swXS51c2VybmFtZVxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0U29jaWFsVXNlcihsb2dpblJlc3BvbnNlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IGBObyB1c2VyIGlzIGN1cnJlbnRseSBsb2dnZWQgaW4gd2l0aCAke01pY3Jvc29mdExvZ2luUHJvdmlkZXIuUFJPVklERVJfSUR9YDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIHNpZ25JbigpOiBQcm9taXNlPFNvY2lhbFVzZXI+IHtcclxuICAgIGNvbnN0IGxvZ2luUmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9pbnN0YW5jZS5sb2dpblBvcHVwKHtcclxuICAgICAgc2NvcGVzOiB0aGlzLmluaXRPcHRpb25zLnNjb3BlcyxcclxuICAgICAgcHJvbXB0OiB0aGlzLmluaXRPcHRpb25zLnByb21wdCxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0U29jaWFsVXNlcihsb2dpblJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNpZ25PdXQocmV2b2tlPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgYWNjb3VudHMgPSB0aGlzLl9pbnN0YW5jZS5nZXRBbGxBY2NvdW50cygpO1xyXG4gICAgaWYgKGFjY291bnRzPy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGF3YWl0IHRoaXMuX2luc3RhbmNlLmxvZ291dFBvcHVwKHtcclxuICAgICAgICBhY2NvdW50OiBhY2NvdW50c1swXSxcclxuICAgICAgICBwb3N0TG9nb3V0UmVkaXJlY3RVcmk6IHRoaXMuaW5pdE9wdGlvbnMubG9nb3V0X3JlZGlyZWN0X3VyaSA/PyB0aGlzLmluaXRPcHRpb25zLnJlZGlyZWN0X3VyaSA/PyBsb2NhdGlvbi5ocmVmXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==